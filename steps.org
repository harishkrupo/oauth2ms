#+TITLE: Setup instructions for O356 token for IMAP

* Table of Contents                                       :TOC_5_gh:noexport:
- [[#azure-app-setup][Azure app setup]]
- [[#configjson-configuration][config.json configuration]]
- [[#mbsync-configuration][mbsync configuration]]
- [[#emacs-smtp-configuration][Emacs SMTP configuration]]
- [[#imap-notify-support][Imap notify support]]

* Azure app setup
  You can follow the instructions here: [[https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app][azure register app]] or follow the TLDR below
  1. Login to https://portal.azure.com/#home
  2. Click on Azure active directory
  3. Click on App registration > New Registration
  4. Enter the app's name
  5. Enter redirect URI as http://localhost:5000/getToken. The port number and redirect path ("/getToken") can be configured
  6. Click on the newly created App, select "Certificates and secrets" and create a "New client secret". Make sure the copy the secret from the =value= field now!
  7. Click on API permissions > Add a permission.
     - Click Microsoft graph > Delegated permission
     - Add the "IMAP.AccessAsUser.All" permission
     - Add the "User.ReadBasic.All" permission
     - Add the "SMTP.Send" permission
  That is it. Now follow setting up ~config.json~ below
  
  If ever you cannot setup the app in Azure, for example due to missing permissions, see [here](https://github.com/harishkrupo/oauth2ms/issues/16) or [there](https://github.com/harishkrupo/oauth2ms/issues/15) to obtain a common `tenant_id` and `client_id`.

* config.json configuration
  #+begin_src json
    {
	"tenant_id": "TENANT_ID",
	"client_id": "CLIENT_ID",
	"client_secret": "CLIENT_SECRET",
	"redirect_host": "localhost",
	"redirect_port": "5000",
	"redirect_path": "/getToken/",
	"scopes": ["https://outlook.office.com/IMAP.AccessAsUser.All", "https://outlook.office.com/SMTP.Send"]
    }
  #+end_src
  The TENANT_ID and CLIENT_ID are available on the overview page of the app. CLIENT_SECRET is the one created in step 6.
  If you entered a different port and redirect path in step 5, modify accordingly.
* mbsync configuration
  First install the [[https://github.com/moriyoshi/cyrus-sasl-xoauth2][xoauth2 sasl plugin]]. Then change the following lines in you mbsync configuration:
  #+begin_src
  ...
  PassCmd oauth2ms
  AuthMechs XOAUTH2
  ...
  #+end_src
* Emacs SMTP configuration
  The following code defines a new method to the authentication mechanisms of smtpmail emacs.
  #+begin_src emacs-lisp
    ;;; Call the oauth2ms program to fetch the authentication token
    (defun fetch-access-token ()
      (with-temp-buffer
	(call-process "oauth2ms" nil t nil "--encode-xoauth2")
	(buffer-string)))

    ;;; Add new authentication method for xoauth2
    (cl-defmethod smtpmail-try-auth-method
      (process (_mech (eql xoauth2)) user password)
      (let* ((access-token (fetch-access-token)))
	(smtpmail-command-or-throw
	 process
	 (concat "AUTH XOAUTH2 " access-token)
	 235)))

    ;;; Register the method
    (with-eval-after-load 'smtpmail
      (add-to-list 'smtpmail-auth-supported 'xoauth2))

    (setq message-send-mail-function   'smtpmail-send-it
	  smtpmail-default-smtp-server "smtp.example.com"
	  smtpmail-smtp-server         "smtp.example.com"
	  smtpmail-stream-type  'starttls
	  smtpmail-smtp-service 587)
  #+end_src
* Imap notify support
  The [[https://tools.ietf.org/html/rfc5465][Imap notify extension]] allows you to open an active connection to the imap
  server to listen for events (like new mail) instead of
  polling frequently. When an event is received, you can trigger certain actions
  like updating your mail box using mbsync. The [[https://github.com/harishkrupo/node-imapnotify][imapnotify]] tool can be configured
  to listen for events. Sample configuration:
  #+begin_src javascript
    var child_process = require('child_process');

    function getStdout(cmd) {
	var stdout = child_process.execSync(cmd);
	return stdout.toString().trim();
    }

    exports.host = "outlook.office365.com";
    exports.port = 993;
    exports.tls = true;
    exports.username = "EMAIL";
    exports.xoauth2 = getStdout("oauth2ms --encode-xoauth2");
    exports.onNewMail = "emacsclient -e '(mu4e-update-mail-and-index 1)'";
    exports.boxes = [ "INBOX"];
  #+end_src
  Once configured, the tool can be started using:
  #+begin_src bash
    $ imapnotify -c <path_to_config.js>
  #+end_src
